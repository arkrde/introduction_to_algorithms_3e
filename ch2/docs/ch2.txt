-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/ch2#readme</a>
@package ch2
@version 0.1.0.0

module BinaryAddition

-- | Function to implement bitwise addition of two binary arrays
binaryAddition :: [Bool] -> [Bool] -> [Bool]


-- | <pre>
--   "Referring back to the searching problem (see Exercise 2.1-3), observe that 
--   if the sequence A is sorted, we can check the midpoint of the sequence against 
--   v and eliminate half of the sequence from further consideration. The binary 
--   search  algorithm repeats this procedure, halving the size of the remaining 
--   portion of the sequence each time. "
--   </pre>
module BinarySearch

-- | Function to search for an element in a sorted list using the "binary
--   search" algorithm
binarySearch :: (Eq a, Ord a) => a -> [a] -> Bool


-- | <pre>
--   "Bubblesort is a popular, but inefficient, sorting algorithm. It works by 
--   repeatedly swapping adjacent elements that are out of order "
--   </pre>
module BubbleSort

-- | The <a>bubbleSort</a> function sorts a list using the "bubble sort"
--   algorithm and returns the sorted list keeping the original list
--   intact.
bubbleSort :: (Eq a, Ord a) => [a] -> [a]


-- | <pre>
--   "Describe a theta(n lg n)-time algorithm that, given a set S of n integers 
--   and another integer x, determines whether or not there exist two elements in S 
--   whose sum is exactly x"
--   </pre>
module FindParts
findParts :: Int -> [Int] -> Bool


-- | <pre>
--   ""
--   </pre>
module Horner

-- | Function to implement "Horner's rule" to evaluate a polynomial
horner :: Num a => a -> [a] -> a


-- | <pre>
--   "We can express insertion sort as a recursive procedure as follows. In order 
--   to sort A[1..n], we recursively sort A[1..n-1] and then insert A[n] into 
--   the sorted array A[1..n-1]. Write a recurrence for the running time of this 
--   recursive version of insertion sort."
--   </pre>
module InsertionSort

-- | The <a>insertionSort</a> function sorts an unsorted list and returns
--   the sorted list while keeping the original list intact
insertionSort :: (Eq a, Ord a) => [a] -> [a]


-- | <pre>
--   ""
--   </pre>
module LinearSearch

-- | Function to execute "linear search" for an element in a list
linearSearch :: Eq a => a -> [a] -> Int


-- | <pre>
--   ""
--   </pre>
module MergeSort

-- | The <a>mergeSort</a> function sorts an unsorted list and returns the
--   sorted list keeping the original list intact
mergeSort :: (Eq a, Ord a) => [a] -> [a]

module SelectionSort

-- | The <a>selectionSort</a> function sorts a list using the "selection
--   sort" algorithm and returns the sorted list keeping the original list
--   intact.
selectionSort :: Ord a => [a] -> [a]
